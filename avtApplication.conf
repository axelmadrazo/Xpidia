GlobalOptions {

  //Shared secret API key between the client and the server
  apiKey = "someApiKey"

  //Base URL for the API
  apiLocation = "http://localhost:81/Xpidia"

  // Phase for Sale Options[2-Phase, 1-Phase]
  salePhase = "1-Phase"

  // Phase for Cancellation Options[2-Phase, 1-Phase]
  cancellationPhase = "1-Phase"

  // set to true if your Activity is only a Ground Transportation (Ex. Airport Shuttle)
  isGT = false

  // set to true if you would like the test ouput to be available a local hosted static html site
  generateHtmlOutput = false

  // set to true if you want the test to also output to your console
  generateConsoleOutput= true

  //These are infixed inbetween the apiLocation and the generated URI
  relativeUrls {
    CheckAvailability = "",
    CreateSale = "",
    CommitSale = "",
    ReleaseSale = "",
    GetSale = "",
    CreateSaleCancellation = "",
    CommitSaleCancellation = "",
    ReleaseSaleCancellation = ""
  }
}

// Only for Ground Transportation Partners (Airport Shuttles, etc.)
GroundTransportation {
  OneWayBooking {
    additionalCriteria = [
      {origin = {name = "CUN", address1 = "", address2 = "", city = "Cancun, Quintana Roo, Mexico (CUN-Cancun Intl.)", postalCode = "", country = "", state = "", latitude = "", longitude = "", locationType = "Airport"}},
      {destination = {name = "Villa del Palmar Cancun Luxury Beach Resort & Spa", address1 = "Carretera Punta Sam Km. 5.2", address2 = "Mz9 SMZ2 Lote 3", city = "Playa Mujeres", postalCode = "77400", country = "MEX", state = "QROO", latitude = "21.23278", longitude = "-86.802196", locationType = "Hotel"}},
      {"directionality" = "toport"},
      {"passengerCount" = 4},
      {"flightInfo" = {airportCode = "CUN", departureAirline = "4O", arrivalAirline = "4O", departureFlightNumber = "990", arrivalFlightNumber = "991", arrivalDateTime = "2018-01-15T17:55", departureDateTime = "2018-01-20T19:25"}}
    ]
  }
  RoundTripBooking {
    additionalCriteria  = [
      {origin = { name = "CUN",address1 ="",address2="",city="Cancun, Quintana Roo, Mexico (CUN-Cancun Intl.)",postalCode="",country="",state="",latitude="",longitude="",locationType="Airport"}},
      {destination = {name="Villa del Palmar Cancun Luxury Beach Resort & Spa",address1="Carretera Punta Sam Km. 5.2", address2="Mz9 SMZ2 Lote 3",city="Playa Mujeres",postalCode="77400",country="MEX",state="QROO", latitude="21.23278",longitude="-86.802196",locationType="Hotel"}},
      {"directionality" = "roundtrip"},
      {"passengerCount" = 4},
      {"flightInfo" = {airportCode="CUN",departureAirline="4O",arrivalAirline="4O", departureFlightNumber="990",arrivalFlightNumber="991",arrivalDateTime="2018-01-15T17:55",departureDateTime="2018-01-20T19:25"}}
    ]
  }
}


CheckAvailability {
  //Base test for a successful CheckAvailability call
  //  Should return a status of 'Available'
  BaseTest {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    minimumAccuracy = "Exact"
    minDate = "2017-03-21"
    maxDate = "2017-03-21"
  }

  //Test a sold out activity
  //  Should return a status of 'Sold Out'
  SoldOut {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    minimumAccuracy = "Exact"
    minDate = "2016-12-03"
    maxDate = "2016-12-03"
  }

  //Test an unavailable activity
  //  Should return a status of 'Unavailable'
  NotAvailable {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    minimumAccuracy = "Exact"
    minDate = "2017-03-20"
    maxDate = "2017-03-20"
  }

  Freesell {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    minimumAccuracy = "Exact"
    minDate = "2017-03-21"
    maxDate = "2017-03-21"
  }

  // Test error response for an unrecognized suppler branch
  // Should return an error of 'PartnerSupplierBranchIdUnrecognized'
  // Values from the CheckAvailability baseTest are used in this
  // test and the partnerSupplierBranchId is randomly generated
  PartnerSupplierBranchIdUnrecognized {
    ignore = false
  }

  // Test error response for an unrecognized activity
  // Should return an error of 'PartnerActivityIdUnrecognized'
  // Values from the CheckAvailability baseTest are used in this
  PartnerActivityIdUnrecognized {
    ignore = false
  }

  // Test error response for an unrecognized offer
  // Should return an error of 'PartnerOfferIdUnrecognized'
  // Values from the CheckAvailability baseTest are used in this
  PartnerOfferIdUnrecognized {
    ignore = false
  }

  // Test that when a date span is requested multiple dates are returned
  // Should be set to a range of one week.
  // Values from the CheckAvailability baseTest are used in this
  // with the dateSpan checking for availability for 30 days on this offer
  DateSpan {
    ignore = false
  }

  // This test uses the CheckAvailability baseTest data
  // (specifically the partnerSupplierBranchId) to generate a request
  // Authentication is not provided or is incorrect and this test
  // will ensure you are returning the appropriate 401 and 403 http status codes
  AuthenticationHeaderInvalid {
    ignore = true
  }
}

CreateSale {
  // Base test for a successful CreateSale call
  // Should return a valid response body
  // For GT partners there will be two createSale BaseTests
  // One for OneWay bookings and one for a RoundTrip booking
  BaseTest {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 5,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst-Jar-1",
      lastName = "NameLast-Jar-1"
    }]
  }



  // Test error response for an unrecognized suppler branch
  // Should return an error of 'PartnerSupplierBranchIdUnrecognized'
  // Values from the CreateSale baseTest are used in this
  // test and the partnerSupplierBranchId is randomly generated
  PartnerSupplierBranchIdUnrecognized {
    ignore = false
  }

  // Test error response for an unrecognized activity
  // Should return an error of 'PartnerActivityIdUnrecognized'
  // Values from the CreateSale baseTest are used in this
  // test and the partnerActivityId is randomly generated
  PartnerActivityIdUnrecognized {
    ignore = false
  }

  // Test error response for an unrecognized offer
  // Should return an error of 'PartnerOfferIdUnrecognized'
  // Values from the CreateSale baseTest are used in this
  // test and the partnerOfferId is randomly generated
  PartnerOfferIdUnrecognized {
    ignore = false
  }

  // Test error response for an unrecognized ticketType
  // Should return an error of 'PartnerTicketTypeIdUnrecognized'
  // Values from the CreateSale baseTest are used in this
  // test and the partnerTicketTypeId is randomly generated
  PartnerTicketTypeIdUnrecognized {
    ignore = false
  }

  // Test error response for an invalid configuration
  // Should return an error of 'ThisConfigurationNotAvailable'
  ThisConfigurationNotAvailable {
    ignore = true
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 5,
    localDate = "2017-03-01"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }

  // PerGroup VBP test for a successful GetSale call
  // Should return a valid response body
  // Calls CreateSale and CommitSale before calling GetSale
  PerGroupVBP {
    ignore = false
    partnerSupplierBranchId = "4246",
    partnerActivityId = "83",
    partnerOfferId = "t540-60",
    holdDurationSeconds = 5,
    localDate = "2020-01-01"
    ticketTypes = [ {
      partnerTicketTypeId = "qty"
      count = 1,
      travelerCount = 5,
      voucherCount = 1
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }
}

CommitSale {
  // Base test for a successful CommitSale call
  // Should return a valid response body
  // Calls CreateSale before before calling CommitSale
  BaseTest {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 0,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }

  // Test error response for an unknown sale
  // Should return an error of 'SaleNotFound'.
  // Values from the CommitSale baseTest are substituted
  // for values in this test. The call to CommitSale is made
  // without the CreateSale call being made at all.
  SaleNotFound {
    ignore = false
  }

  // Test error response for an expired sale
  // Should return an error of 'SaleExpired'
  // Calls CreateSale before before calling CommitSale
  SaleExpired {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 50,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }

  // PerGroup VBP test for a successful CommitSale call
  // Should return a valid response body
  // Calls CreateSale before before calling CommitSale
  PerGroupVBP {
    ignore = true
    partnerSupplierBranchId = "4246",
    partnerActivityId = "83",
    partnerOfferId = "t540-60",
    holdDurationSeconds = 5,
    localDate = "2020-01-01"
    ticketTypes = [ {
      partnerTicketTypeId = "qty"
      count = 1,
      travelerCount = 5,
      voucherCount = 1
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }
}

ReleaseSale {
  // Base test for a successful ReleaseSale call
  // Should return a valid response body
  // Calls CreateSale before before calling ReleaseSale
  BaseTest {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 5,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }

  // Test error response for an unknown sale
  // Should return an error of 'SaleNotFound'.
  // Values from the ReleaseSale baseTest are substituted
  // for values in this test. The call to ReleaseSale is made
  // without the CreateSale call being made at all.
  SaleNotFound {
    ignore = false
  }
}

GetSale {
  // Base test for a successful GetSale call
  // Should return a valid response body
  // Calls CreateSale and CommitSale before calling GetSale
  BaseTest {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 5,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }

  // Test error response for an unknown sale
  // Should return an error of 'SaleNotFound'.
  // Values from the GetSale baseTest are substituted
  // for values in this test. The call to GetSale is made
  // without the CreateSale or CommitSale call being made at all.
  SaleNotFound {
    ignore = true
  }

  // PerGroup VBP test for a successful CommitSale call
  // Should return a valid response body
  // Calls CreateSale before before calling CommitSale
  PerGroupVBP {
    ignore = true
    partnerSupplierBranchId = "4246",
    partnerActivityId = "83",
    partnerOfferId = "t540-60",
    holdDurationSeconds = 5,
    localDate = "2020-01-01"
    ticketTypes = [ {
      partnerTicketTypeId = "qty"
      count = 1,
      travelerCount = 5,
      voucherCount = 1
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }
}


CreateSaleCancellation {
  // Base test for a successful CreateSaleCancellation call
  // Should return a valid response body
  // Calls CreateSale and CommitSale before before calling CreateSaleCancellation
  BaseTest {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 5,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 5
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }

  // Test error response for an unknown sale
  // Should return an error of 'SaleNotFound'
  SaleNotFound {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 5,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 1
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }

  // Test error response for a sale that can't be cancelled
  // Should return an error of 'SaleNotCancellable'
  // Calls CreateSale and CommitSale before before calling CreateSaleCancellation #### Date need to be less than 72 hours away
  SaleNotCancellable {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 5,
    localDate = "2017-01-26"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }

  // Test error response for a sale that hasn't been committed
  // Should return an error of 'SaleNotCommitted'
  // Calls CreateSale before before calling CreateSaleCancellation
  SaleNotCommitted {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 5,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }
}

CommitSaleCancellation {
  // Base test for a successful CommitSaleCancellation call
  // Should return a valid response body
  // Calls CreateSale, CommitSale, and CreateSaleCancellation before before calling CommitSaleCancellation
  BaseTest {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 50,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }

  // Test error response for an unknown sale
  // Should return an error of 'SaleNotFound'
  SaleNotFound {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 50,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }

  // Test error response for a sale that hasn't had the cancellation created
  // Should return an error of 'CancellationNotCreated'
  // Calls CreateSale and CommitSale before before calling CommitSaleCancellation
  CancellationNotCreated {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 120,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }

  // Test error response for a sale that's already been cancelled
  // Should return an error of 'SaleAlreadyCancelled'
  // Calls CreateSale, CommitSale, CreateSaleCancellation and CommitSaleCancellation before before calling CommitSaleCancellation
  SaleAlreadyCancelled {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 50,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }
}

ReleaseSaleCancellation {
  // Base test for a successful ReleaseSaleCancellation call
  // Should return a valid response body
  // Calls CreateSale, CommitSale, and CreateSaleCancellation before before calling ReleaseSaleCancellation
  BaseTest {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 5,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }

  // Test error response for an unknown sale
  // Should return an error of 'SaleNotFound'
  SaleNotFound {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 5,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }

  // Test error response for a sale that hasn't had the cancellation created
  // Should return an error of 'CancellationNotCreated'
  // Calls CreateSale and CommitSale before before calling ReleaseSaleCancellation
  CancellationNotCreated {
    ignore = false
    partnerSupplierBranchId = "woi",
    partnerActivityId = "291957W3",
    partnerOfferId = "391472W3025",
    holdDurationSeconds = 100,
    localDate = "2017-03-21"
    ticketTypes = [ {
      partnerTicketTypeId = "adult"
      count = 2
    }],
    guests = [{
      firstName = "NameFirst",
      lastName = "NameLast"
    }]
  }
}
